var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/ApiModule.html",[0,0.991,1,1.753]],["body/modules/ApiModule.html",[0,1.479,1,3.373,2,1.498,3,1.945,4,2.951,5,2.951,6,3.268,7,0.035,8,3.268,9,2.359,10,1.816,11,1.816,12,0.396,13,0.342,14,0.342,15,3.557,16,2.926,17,0.571,18,0.574,19,3.557,20,3.557,21,0.396,22,0.147,23,0.026,24,0.026]],["title/controllers/AppController.html",[25,1.188,26,1.961]],["body/controllers/AppController.html",[7,0.035,12,0.414,13,0.357,14,0.357,17,0.529,18,0.601,21,0.414,22,0.154,23,0.027,24,0.027,25,1.826,26,3.012,27,1.428,28,3.087,29,0.67,30,1.667,31,4.583,32,1.087,33,0.903,34,3.721,35,1.191,36,1.522,37,2.677,38,3.087,39,3.721,40,1.191,41,1.304,42,3.721]],["title/modules/AppModule.html",[0,0.991,43,1.961]],["body/modules/AppModule.html",[0,1.283,1,3.073,2,1.213,3,1.688,7,0.035,9,2.047,10,1.471,11,1.471,12,0.32,13,0.277,14,0.277,16,2.539,17,0.631,18,0.465,21,0.32,22,0.119,23,0.022,24,0.022,26,2.92,27,1.539,36,0.922,37,2.77,38,2.39,43,3.595,44,2.39,45,2.881,46,2.39,47,2.066,48,2.539,49,2.881,50,1.632,51,2.066,52,1.213,53,2.881,54,2.066,55,2.881,56,2.539,57,2.881,58,2.881,59,1.632,60,2.875,61,2.39,62,2.881,63,2.881,64,1.471,65,2.881,66,2.881]],["title/injectables/AppService.html",[37,1.581,67,0.557]],["body/injectables/AppService.html",[7,0.034,12,0.438,13,0.379,14,0.379,17,0.438,18,0.636,21,0.438,22,0.163,23,0.028,24,0.028,29,0.709,30,1.729,31,4.681,33,0.957,35,1.262,36,1.579,37,2.519,41,1.382,67,0.888,68,1.514,69,3.271,70,3.943,71,3.943,72,3.943]],["title/controllers/AuthController.html",[25,1.188,73,1.961]],["body/controllers/AuthController.html",[7,0.035,12,0.265,13,0.229,14,0.229,17,0.566,18,0.384,21,0.265,22,0.099,23,0.02,24,0.02,25,0.914,27,0.914,29,0.428,30,1.226,32,1.212,33,1.006,35,1.327,40,0.762,41,1.453,73,2.216,74,1.975,75,1.708,76,2.381,77,2.592,78,2.902,79,2.902,80,2.902,81,1.975,82,2.333,83,3.499,84,2.381,85,1.746,86,1.212,87,0.914,88,1.453,89,3.084,90,2.356,91,2.381,92,2.895,93,2.381,94,2.381,95,1.975,96,2.333,97,2.381,98,2.381,99,1.216,100,2.381,101,1.975,102,1.975,103,1.975,104,1.708,105,1.022,106,1.216,107,1.975,108,1.349,109,2.381,110,1.786,111,1.975,112,1.349,113,2.381,114,2.381,115,1.975,116,2.381,117,1.975,118,2.381,119,2.381,120,2.381,121,2.381,122,2.381,123,1.975,124,2.381,125,2.381]],["title/injectables/AuthHelper.html",[67,0.557,126,1.433]],["body/injectables/AuthHelper.html",[7,0.035,12,0.166,13,0.143,14,0.143,17,0.467,18,0.241,21,0.166,22,0.062,23,0.014,24,0.014,29,0.268,30,0.853,32,0.436,33,1.159,35,1.344,36,1.802,40,1.344,41,1.472,52,0.628,59,1.745,64,0.762,67,0.438,68,0.573,77,2.211,85,1.865,86,1.294,87,1.053,88,1.552,90,1.943,105,1.436,106,0.762,126,1.126,127,1.238,128,0.779,129,3.025,130,2.659,131,2.06,132,3.025,133,3.081,134,2.434,135,2.434,136,2.019,137,2.948,138,2.434,139,1.238,140,2.434,141,4.199,142,2.434,143,2.434,144,1.492,145,4.199,146,2.434,147,1.492,148,1.815,149,2.434,150,1.492,151,2.434,152,3.555,153,1.492,154,2.019,155,2.434,156,1.492,157,2.434,158,1.492,159,3.081,160,1.745,161,1.492,162,1.238,163,1.238,164,2.434,165,1.07,166,1.07,167,0.845,168,1.492,169,1.238,170,1.492,171,1.492,172,1.492,173,1.238,174,2.019,175,1.492,176,1.492,177,1.492,178,1.492,179,0.845,180,1.238,181,2.434,182,1.492,183,1.492,184,2.434,185,1.492,186,1.492,187,2.556,188,1.492,189,1.492,190,1.492,191,1.238,192,1.492,193,1.745,194,1.492,195,1.492,196,1.07,197,1.492]],["title/modules/AuthModule.html",[0,0.991,198,1.753]],["body/modules/AuthModule.html",[0,1.198,2,1.1,3,1.575,7,0.035,9,1.91,10,1.334,11,1.334,12,0.29,13,0.251,14,0.251,16,1.654,17,0.636,18,0.422,21,0.29,22,0.108,23,0.021,24,0.021,27,1.436,48,2.369,50,1.479,51,1.873,52,1.1,73,2.768,99,1.334,105,1.093,106,1.334,110,2.684,111,2.167,126,2.432,129,1.654,165,1.873,198,3.239,199,2.167,200,2.167,201,2.977,202,2.612,203,2.612,204,2.612,205,1.654,206,2.612,207,1.873,208,2.612,209,3.135,210,2.612,211,2.612,212,2.612,213,2.612,214,2.612,215,1.873,216,2.612,217,2.167,218,2.612,219,2.612,220,2.612,221,2.167]],["title/injectables/AuthService.html",[67,0.557,110,1.581]],["body/injectables/AuthService.html",[7,0.035,12,0.193,13,0.167,14,0.167,17,0.5,18,0.28,21,0.193,22,0.072,23,0.015,24,0.015,29,0.312,30,0.962,32,0.802,33,1.025,35,1.091,40,1.438,41,1.195,52,0.73,59,2.195,67,0.494,68,0.666,77,2.079,78,2.278,79,2.278,80,2.278,81,2.278,82,2.157,85,1.435,86,1.235,87,0.931,88,1.195,89,2.455,90,2.079,95,2.278,96,2.157,99,0.885,105,1.623,106,0.885,107,1.438,110,1.402,126,1.577,128,0.879,130,2.846,131,1.929,132,3.183,136,2.278,148,1.74,154,1.438,160,1.969,162,1.438,163,1.438,166,1.244,167,0.982,179,2.392,180,1.438,187,2.827,193,3.223,196,1.969,207,1.244,222,1.438,223,2.827,224,1.734,225,2.746,226,1.734,227,1.734,228,2.278,229,1.734,230,1.734,231,2.746,232,1.734,233,1.734,234,1.438,235,2.746,236,1.734,237,1.438,238,2.746,239,2.746,240,2.746,241,1.734,242,2.746,243,2.278,244,2.278,245,2.746]],["title/injectables/JwtAuthGuard.html",[67,0.557,108,1.753]],["body/injectables/JwtAuthGuard.html",[7,0.035,12,0.311,13,0.268,14,0.268,17,0.547,18,0.451,21,0.311,22,0.116,23,0.022,24,0.022,29,0.502,30,1.375,33,0.952,35,1.256,41,1.375,59,1.581,64,1.426,67,0.706,68,1.072,85,1.652,86,1.146,87,0.865,88,1.375,90,1.815,92,2.484,105,1.695,106,1.426,108,2.222,112,1.581,131,2.062,132,2.872,191,2.316,196,2.003,205,1.769,246,2.316,247,3.923,248,3.923,249,3.923,250,4.918,251,2.793,252,2.793,253,3.923,254,2.793,255,2.793,256,2.793,257,3.923,258,2.003,259,2.793,260,2.316,261,2.793,262,2.793,263,2.793]],["title/injectables/JwtStrategy.html",[67,0.557,201,1.753]],["body/injectables/JwtStrategy.html",[7,0.035,12,0.298,13,0.257,14,0.257,17,0.59,18,0.432,21,0.298,22,0.111,23,0.021,24,0.021,29,0.482,30,1.335,32,0.783,33,1.076,35,0.858,36,1.419,40,1.419,41,0.939,50,1.517,64,1.368,67,0.686,68,1.029,77,2.453,85,1.604,86,1.113,87,0.977,88,1.335,90,1.763,99,1.368,105,0.783,106,1.368,126,2.052,128,1.219,129,1.697,137,3.16,139,2.223,201,2.158,205,1.697,207,1.922,209,3.463,215,2.732,217,2.223,223,3.678,228,3.16,258,1.922,264,2.223,265,2.68,266,3.81,267,3.81,268,2.68,269,2.68,270,2.68,271,2.68,272,2.68,273,2.223,274,2.68,275,2.68,276,2.68,277,2.68,278,2.68,279,2.68,280,2.68,281,2.68]],["title/classes/LoginDto.html",[22,0.128,82,1.581]],["body/classes/LoginDto.html",[7,0.034,12,0.336,13,0.29,14,0.29,17,0.461,21,0.461,22,0.211,23,0.023,24,0.023,29,0.544,32,1.212,33,1.006,36,1.805,40,1.865,82,2.117,86,0.884,87,0.914,96,1.544,128,1.327,131,2.237,148,2.599,179,2.883,282,1.916,283,2.169,284,2.509,285,3.025,286,3.825,287,3.025,288,3.925,289,2.169,290,3.925,291,2.974,292,2.509,293,1.916,294,2.509]],["title/classes/RegisterDto.html",[22,0.128,96,1.581]],["body/classes/RegisterDto.html",[7,0.034,12,0.315,13,0.272,14,0.272,17,0.441,21,0.441,22,0.205,23,0.022,24,0.022,29,0.51,32,1.336,33,1.11,36,1.81,40,1.883,82,1.448,86,1.336,87,1.008,88,1.39,96,2.025,128,1.269,131,2.258,148,2.528,179,2.804,282,1.796,283,2.034,284,2.353,286,3.551,288,3.793,289,2.034,290,3.793,291,2.844,292,2.353,293,1.796,294,2.353,295,2.836,296,2.353,297,2.836,298,2.836,299,2.836]],["title/controllers/RoleController.html",[25,1.188,300,1.961]],["body/controllers/RoleController.html",[7,0.034,12,0.483,13,0.417,14,0.417,17,0.483,18,0.701,21,0.483,22,0.18,23,0.029,24,0.029,25,1.667,27,1.667,75,3.115,300,3.316,301,3.603,302,4.343,303,4.343]],["title/modules/RoleModule.html",[0,0.991,6,1.753]],["body/modules/RoleModule.html",[0,1.498,2,1.527,3,1.97,6,3.285,7,0.034,9,2.389,10,1.852,11,1.852,12,0.404,13,0.348,14,0.348,17,0.576,18,0.586,21,0.404,22,0.15,23,0.026,24,0.026,27,1.796,48,2.964,300,3.281,304,3.01,305,3.01,306,3.285,307,3.628,308,3.628,309,3.628]],["title/injectables/RoleService.html",[67,0.557,306,1.753]],["body/injectables/RoleService.html",[7,0.034,12,0.489,13,0.422,14,0.422,17,0.489,18,0.709,21,0.489,22,0.182,23,0.03,24,0.03,67,0.949,68,1.687,306,2.987,310,3.646]],["title/injectables/TypeOrmConfigService.html",[56,1.961,67,0.557]],["body/injectables/TypeOrmConfigService.html",[7,0.035,12,0.324,13,0.28,14,0.388,17,0.516,18,0.471,21,0.324,22,0.121,23,0.023,24,0.023,29,0.525,30,1.417,32,0.852,33,0.981,35,0.933,40,1.485,41,1.022,50,1.651,52,1.227,56,2.56,64,2.064,67,0.727,68,1.119,77,2.148,87,0.891,99,1.489,128,1.294,131,1.781,148,1.489,209,3.328,215,3.328,260,2.419,311,2.419,312,5.012,313,2.916,314,4.641,315,4.043,316,2.916,317,4.043,318,2.916,319,2.916,320,2.916,321,2.916,322,2.916,323,2.916,324,2.916,325,2.916,326,2.916,327,2.916,328,2.091,329,2.916,330,2.916,331,2.916,332,2.916,333,2.916,334,2.916,335,2.916,336,2.916,337,2.916,338,2.419]],["title/classes/UpdateNameDto.html",[22,0.128,339,1.753]],["body/classes/UpdateNameDto.html",[7,0.034,12,0.42,13,0.363,14,0.363,17,0.42,21,0.42,22,0.199,23,0.027,24,0.027,29,0.68,32,1.104,33,0.917,36,1.538,40,1.69,86,1.543,87,0.833,88,1.683,128,1.538,131,2.027,282,2.393,286,3.445,291,3.445,293,2.393,296,3.135,339,2.72,340,3.135,341,3.779]],["title/entities/User.html",[105,0.905,342,2.221]],["body/entities/User.html",[7,0.035,12,0.272,13,0.235,14,0.235,17,0.397,21,0.272,22,0.148,23,0.02,24,0.02,29,0.44,32,1.438,33,1.195,36,1.645,64,2.363,86,1.231,87,1.223,105,1.042,128,1.142,131,2.273,148,2.15,167,1.385,173,4.083,174,3.493,179,2.385,243,3.493,244,2.959,258,1.754,328,1.754,342,2.558,343,2.028,344,4.211,345,5.139,346,2.445,347,3.567,348,4.211,349,2.445,350,3.567,351,4.629,352,2.959,353,2.445,354,2.445,355,2.445,356,2.445,357,2.445,358,3.567,359,2.028,360,3.567,361,4.922]],["title/controllers/UserController.html",[25,1.188,362,1.961]],["body/controllers/UserController.html",[7,0.035,12,0.322,13,0.278,14,0.278,17,0.604,18,0.467,21,0.322,22,0.12,23,0.023,24,0.023,25,1.11,27,1.11,29,0.52,30,1.409,32,0.845,33,0.702,35,0.926,40,0.926,41,1.014,75,2.074,77,2.311,85,1.218,86,0.845,87,0.638,88,1.014,89,3.163,90,1.861,92,3.163,99,1.477,101,2.399,102,2.399,103,2.399,104,3.896,105,1.175,108,1.638,112,1.638,115,2.399,117,2.399,123,2.399,339,2.828,362,2.546,363,2.399,364,3.833,365,2.399,366,2.893,367,2.893,368,2.893,369,2.893,370,2.399,371,2.074,372,2.053,373,2.399,374,2.893,375,2.893,376,2.893,377,2.893]],["title/modules/UserModule.html",[0,0.991,8,1.753]],["body/modules/UserModule.html",[0,1.378,2,1.346,3,1.813,7,0.035,8,3.295,9,2.198,10,1.633,11,1.633,12,0.356,13,0.307,14,0.307,16,2.727,17,0.623,18,0.516,21,0.356,22,0.132,23,0.024,24,0.024,27,1.653,48,2.727,51,2.293,52,1.346,105,0.935,198,3.171,221,2.653,362,3.083,371,2.293,372,2.859,373,2.653,378,2.653,379,3.198,380,2.653,381,3.198,382,3.198,383,3.198]],["title/injectables/UserService.html",[67,0.557,372,1.581]],["body/injectables/UserService.html",[7,0.035,12,0.313,13,0.27,14,0.27,17,0.599,18,0.454,21,0.313,22,0.117,23,0.022,24,0.022,29,0.506,30,1.382,32,0.822,33,0.957,35,0.901,40,1.458,41,0.986,52,1.185,59,1.594,67,0.71,68,1.08,77,2.107,85,1.185,86,0.822,87,0.869,88,0.986,89,1.782,90,1.825,92,3.125,104,3.266,105,1.331,112,1.594,128,1.262,130,3.411,131,1.748,132,2.884,160,2.829,166,2.018,167,1.594,234,2.334,237,2.334,339,2.795,364,3.272,365,3.272,370,2.334,371,2.018,372,2.014,384,2.334,385,2.814,386,2.814,387,2.814,388,2.814]],["title/coverage.html",[389,3.022]],["body/coverage.html",[7,0.035,14,0.256,22,0.183,23,0.021,24,0.021,25,1.85,26,1.691,28,2.214,37,1.363,47,1.915,54,1.915,56,1.691,60,1.915,67,1.002,69,2.214,73,1.691,74,2.214,82,1.363,87,0.588,96,1.363,105,0.78,108,1.512,110,1.363,126,1.235,127,2.214,193,1.915,201,1.512,222,2.214,246,2.214,264,2.214,283,2.725,300,1.691,301,2.214,306,1.512,310,2.214,311,2.214,339,1.512,340,2.214,342,1.915,343,2.214,362,1.691,363,2.214,372,1.363,384,2.214,389,1.915,390,2.67,391,2.67,392,2.67,393,6.118,394,5.295,395,4.425,396,4.821,397,2.67,398,2.67,399,4.821,400,2.67,401,2.214,402,3.8,403,2.214,404,2.214,405,2.67,406,2.67]],["title/dependencies.html",[3,1.566,407,2.15]],["body/dependencies.html",[3,1.434,7,0.035,18,0.55,22,0.208,23,0.025,24,0.025,50,1.93,52,1.434,112,1.93,129,2.158,165,2.444,167,1.93,169,2.826,205,2.158,273,3.726,289,2.444,293,2.158,359,2.826,408,5.553,409,3.407,410,3.407,411,3.407,412,3.407,413,3.407,414,3.407,415,3.407,416,3.407,417,3.407,418,3.407,419,3.407,420,3.407,421,3.407,422,3.407,423,3.407,424,3.407,425,3.407,426,3.407,427,3.407,428,3.407,429,3.407,430,3.407]],["title/miscellaneous/functions.html",[431,1.641,432,3.086]],["body/miscellaneous/functions.html",[7,0.032,23,0.029,24,0.029,29,0.754,35,1.342,36,1.772,54,3.676,85,1.765,86,1.225,87,0.924,88,1.469,401,3.478,403,3.478,404,4.592,431,2.655,432,3.478,433,4.193,434,4.193,435,4.193,436,4.193]],["title/index.html",[29,0.466,437,2.592,438,2.592]],["body/index.html",[0,0.839,7,0.034,13,0.252,23,0.021,24,0.021,130,1.66,338,2.175,389,1.88,439,2.622,440,2.622,441,3.751,442,2.622,443,2.622,444,2.622,445,2.622,446,2.622,447,2.622,448,2.175,449,5.263,450,2.622,451,2.622,452,2.622,453,5.419,454,2.622,455,2.622,456,2.622,457,5.419,458,2.622,459,2.622,460,3.751,461,2.622,462,2.622,463,2.622,464,3.751,465,3.751,466,2.622,467,2.622,468,2.622,469,3.751,470,3.751,471,2.622,472,2.622,473,2.622,474,2.622,475,2.622,476,2.175,477,2.622,478,2.622,479,2.622,480,2.622,481,2.622,482,2.622,483,2.622,484,2.622,485,2.622,486,4.38,487,2.175,488,2.622,489,2.622,490,2.622,491,2.622,492,2.622,493,2.622,494,2.175,495,4.781,496,2.622,497,2.622,498,3.751,499,3.751,500,2.622,501,2.622,502,2.622,503,4.38,504,2.622,505,4.38,506,2.622,507,3.751,508,2.622,509,2.622,510,2.622]],["title/modules.html",[2,1.774]],["body/modules.html",[1,2.347,2,1.745,6,2.347,7,0.029,8,2.347,23,0.029,24,0.029,43,2.625,198,2.347,476,4.89,511,5.895,512,5.895,513,5.895]],["title/overview.html",[514,3.495]],["body/overview.html",[1,3.201,2,1.284,3,1.756,4,2.53,5,2.53,6,3.029,7,0.034,8,3.201,9,2.129,10,1.557,11,1.557,23,0.023,24,0.023,27,1.171,37,2.426,43,3.497,44,2.53,46,2.53,68,1.171,110,2.426,126,2.199,198,3.306,199,2.53,200,2.53,201,2.691,282,1.932,304,2.53,305,2.53,306,2.691,328,2.188,372,2.426,378,2.53,380,2.53,514,2.53,515,3.05,516,3.05,517,3.05,518,3.05,519,3.05]],["title/properties.html",[128,1.191,407,2.15]],["body/properties.html",[7,0.034,23,0.03,24,0.03,128,1.451,448,3.76,487,3.76,494,3.76,520,4.533,521,4.533,522,4.533]],["title/miscellaneous/variables.html",[431,1.641,523,3.086]],["body/miscellaneous/variables.html",[7,0.033,23,0.03,24,0.03,29,0.801,36,1.424,47,3.191,60,3.81,61,3.691,87,0.981,352,3.691,431,2.818,523,3.691,524,4.45,525,4.45]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":521,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["0.3.10",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":517,"title":{},"body":{"overview.html":{}}}],["1.0.1",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["16.0.2",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":519,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":516,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":515,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":518,"title":{},"body":{"overview.html":{}}}],["8.8.0",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["amazing",{"_index":477,"title":{},"body":{"index.html":{}}}],["api/api.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["api/role",{"_index":505,"title":{},"body":{"index.html":{}}}],["api/user/auth/auth.guard",{"_index":369,"title":{},"body":{"controllers/UserController.html":{}}}],["api/user/user.entity",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["apimodule",{"_index":1,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["app",{"_index":455,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":26,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":447,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":43,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":37,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":132,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.guard",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.helper",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["auth.service",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.strategy",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":383,"title":{},"body":{"modules/UserModule.html":{}}}],["authcontroller",{"_index":73,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":256,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":259,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authhelper",{"_index":126,"title":{"injectables/AuthHelper.html":{}},"body":{"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authmodule",{"_index":198,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":487,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":110,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":196,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["backend",{"_index":499,"title":{},"body":{"index.html":{}}}],["backers",{"_index":478,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":360,"title":{},"body":{"entities/User.html":{}}}],["bcrypt",{"_index":168,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["bcrypt.comparesync(password",{"_index":182,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["bcrypt.gensaltsync(10",{"_index":185,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["bcrypt.hashsync(password",{"_index":186,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["bcryptjs",{"_index":169,"title":{},"body":{"injectables/AuthHelper.html":{},"dependencies.html":{}}}],["body",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["body.name",{"_index":388,"title":{},"body":{"injectables/UserService.html":{}}}],["boolean",{"_index":154,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{}}}],["bootstrap",{"_index":404,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":513,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":511,"title":{},"body":{"modules.html":{}}}],["build",{"_index":496,"title":{},"body":{"index.html":{}}}],["building",{"_index":442,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":247,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":249,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["class",{"_index":22,"title":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateNameDto.html":{}},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":282,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateNameDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["cluster_apimodule",{"_index":4,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":5,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule_providers",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_rolemodule",{"_index":304,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_providers",{"_index":305,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":378,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":379,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":380,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["co",{"_index":506,"title":{},"body":{"index.html":{}}}],["column",{"_index":361,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":344,"title":{},"body":{"entities/User.html":{}}}],["common/helper/env.helper",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["config",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{}}}],["config.get('jwt_expires",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_key",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{}}}],["const",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":139,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(@inject(configservice",{"_index":275,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(config",{"_index":265,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwt",{"_index":140,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["constructor(private",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["context",{"_index":252,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":262,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":25,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('role",{"_index":303,"title":{},"body":{"controllers/RoleController.html":{}}}],["controller('user",{"_index":374,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":389,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createtypeormoptions",{"_index":312,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["database",{"_index":323,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["date",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["decode",{"_index":133,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["decode(token",{"_index":143,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["decoded",{"_index":159,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["decoding",{"_index":171,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["default",{"_index":352,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":448,"title":{},"body":{"index.html":{},"properties.html":{}}}],["dest",{"_index":436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["development",{"_index":456,"title":{},"body":{"index.html":{}}}],["dist/**/*.entity.{ts,js",{"_index":329,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["dist/migrations/*.{ts,js",{"_index":331,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["docker",{"_index":495,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":466,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":443,"title":{},"body":{"index.html":{}}}],["email",{"_index":179,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["encode",{"_index":183,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["encodepassword",{"_index":134,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["encodepassword(password",{"_index":146,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["entities",{"_index":328,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":342,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["envfilepath",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":255,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":189,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["exclude",{"_index":358,"title":{},"body":{"entities/User.html":{}}}],["exclude()@column({type",{"_index":356,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":250,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["expiresin",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":21,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["express",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["extends",{"_index":258,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{}}}],["extractjwt",{"_index":271,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":278,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":263,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["file",{"_index":14,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["forbidden",{"_index":188,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["found",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":441,"title":{},"body":{"index.html":{}}}],["function",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":432,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":503,"title":{},"body":{"index.html":{}}}],["generate",{"_index":176,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["generatetoken",{"_index":135,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["generatetoken(user",{"_index":149,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["getenvpath",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getenvpath(`${__dirname}/common/envs",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["getenvpath(dest",{"_index":435,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gethello",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":437,"title":{"index.html":{}},"body":{}}],["grow",{"_index":473,"title":{},"body":{"index.html":{}}}],["handlerequest",{"_index":248,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":253,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hello",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["here",{"_index":484,"title":{},"body":{"index.html":{}}}],["host",{"_index":319,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["httpexception",{"_index":162,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{}}}],["httpexception('conflict",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('forbidden",{"_index":194,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["httpexception('no",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":491,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":163,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{}}}],["httpstatus.conflict",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.forbidden",{"_index":195,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["httpstatus.not_found",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["iauthguard",{"_index":257,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["id",{"_index":174,"title":{},"body":{"injectables/AuthHelper.html":{},"entities/User.html":{}}}],["identifier",{"_index":391,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":280,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":260,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/TypeOrmConfigService.html":{}}}],["import",{"_index":17,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":16,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":29,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":12,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController.html":{}}}],["inject(authhelper",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["inject(authservice",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["inject(configservice",{"_index":315,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["inject(userservice",{"_index":375,"title":{},"body":{"controllers/UserController.html":{}}}],["injectable",{"_index":67,"title":{"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":166,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":160,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":452,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":454,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":190,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["isemail",{"_index":290,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isglobal",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["isoptional",{"_index":291,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateNameDto.html":{}}}],["ispasswordvalid",{"_index":136,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{}}}],["ispasswordvalid(password",{"_index":151,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["isstring",{"_index":286,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateNameDto.html":{}}}],["isstring()@isoptional",{"_index":296,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UpdateNameDto.html":{}}}],["isstring()@minlength(8",{"_index":298,"title":{},"body":{"classes/RegisterDto.html":{}}}],["join",{"_index":480,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":129,"title":{},"body":{"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":108,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":277,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":141,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["jwtstrategy",{"_index":201,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":488,"title":{},"body":{"index.html":{}}}],["lastloginat",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["license",{"_index":494,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":470,"title":{},"body":{"index.html":{}}}],["logger",{"_index":334,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["login",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(body",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":82,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["matching",{"_index":24,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["migrations",{"_index":330,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["migrationstablename",{"_index":332,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["minlength",{"_index":292,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":294,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":431,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":469,"title":{},"body":{"index.html":{}}}],["mo",{"_index":504,"title":{},"body":{"index.html":{}}}],["mode",{"_index":460,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":483,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":489,"title":{},"body":{"index.html":{}}}],["name",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":449,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":493,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":165,"title":{},"body":{"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TypeOrmConfigService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["never",{"_index":336,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["new",{"_index":193,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["node.js",{"_index":440,"title":{},"body":{"index.html":{}}}],["npm",{"_index":453,"title":{},"body":{"index.html":{}}}],["null",{"_index":173,"title":{},"body":{"injectables/AuthHelper.html":{},"entities/User.html":{}}}],["nullable",{"_index":351,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":347,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":471,"title":{},"body":{"index.html":{}}}],["optional",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateNameDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":11,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":514,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p80:3000",{"_index":500,"title":{},"body":{"index.html":{}}}],["package",{"_index":407,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["passport",{"_index":273,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":270,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":274,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":148,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/TypeOrmConfigService.html":{},"entities/User.html":{}}}],["payload",{"_index":269,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":481,"title":{},"body":{"index.html":{}}}],["port",{"_index":321,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["post",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@useguards(jwtauthguard",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@useinterceptors(classserializerinterceptor",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":318,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["prefix",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RoleController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":348,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["production",{"_index":338,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"index.html":{}}}],["progressive",{"_index":439,"title":{},"body":{"index.html":{}}}],["project",{"_index":472,"title":{},"body":{"index.html":{}}}],["promise",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":128,"title":{"properties.html":{}},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["property",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["ps*new",{"_index":502,"title":{},"body":{"index.html":{}}}],["public",{"_index":131,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["put",{"_index":368,"title":{},"body":{"controllers/UserController.html":{}}}],["put('name",{"_index":376,"title":{},"body":{"controllers/UserController.html":{}}}],["put('name')@useguards(jwtauthguard)@useinterceptors(classserializerinterceptor",{"_index":366,"title":{},"body":{"controllers/UserController.html":{}}}],["read",{"_index":482,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refresh(@req",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(undefined",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(user",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["register",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(body",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":96,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["relevic",{"_index":498,"title":{},"body":{"index.html":{}}}],["repository",{"_index":130,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["req.user",{"_index":387,"title":{},"body":{"injectables/UserService.html":{}}}],["request",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reset",{"_index":10,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["results",{"_index":23,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":302,"title":{},"body":{"controllers/RoleController.html":{}}}],["role.controller",{"_index":308,"title":{},"body":{"modules/RoleModule.html":{}}}],["role.service",{"_index":309,"title":{},"body":{"modules/RoleModule.html":{}}}],["role/role.module",{"_index":20,"title":{},"body":{"modules/ApiModule.html":{}}}],["rolecontroller",{"_index":300,"title":{"controllers/RoleController.html":{}},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"coverage.html":{}}}],["rolemodule",{"_index":6,"title":{"modules/RoleModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/RoleModule.html":{},"modules.html":{},"overview.html":{}}}],["roleservice",{"_index":306,"title":{"injectables/RoleService.html":{}},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":457,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":508,"title":{},"body":{"index.html":{}}}],["salt",{"_index":184,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["sanitizer",{"_index":289,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["scalable",{"_index":444,"title":{},"body":{"index.html":{}}}],["secret",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":279,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":445,"title":{},"body":{"index.html":{}}}],["service",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["shared/typeorm/typeorm.service",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":446,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":13,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["spec",{"_index":507,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":475,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.helper.ts",{"_index":434,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":433,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/api/api.module.ts",{"_index":15,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/api/role/role.controller.ts",{"_index":301,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{}}}],["src/api/role/role.dto.ts",{"_index":509,"title":{},"body":{"index.html":{}}}],["src/api/role/role.entity.ts",{"_index":510,"title":{},"body":{"index.html":{}}}],["src/api/role/role.module.ts",{"_index":307,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/api/role/role.service.ts",{"_index":310,"title":{},"body":{"injectables/RoleService.html":{},"coverage.html":{}}}],["src/api/user/auth/auth.controller.ts",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/api/user/auth/auth.controller.ts:24",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/api/user/auth/auth.controller.ts:29",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/api/user/auth/auth.controller.ts:35",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/api/user/auth/auth.dto.ts",{"_index":283,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/api/user/auth/auth.dto.ts:11",{"_index":299,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/api/user/auth/auth.dto.ts:15",{"_index":297,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/api/user/auth/auth.dto.ts:21",{"_index":285,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/api/user/auth/auth.dto.ts:24",{"_index":287,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/api/user/auth/auth.dto.ts:7",{"_index":295,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/api/user/auth/auth.guard.ts",{"_index":246,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/api/user/auth/auth.guard.ts:12",{"_index":251,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/api/user/auth/auth.guard.ts:8",{"_index":254,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/api/user/auth/auth.helper.ts",{"_index":127,"title":{},"body":{"injectables/AuthHelper.html":{},"coverage.html":{}}}],["src/api/user/auth/auth.helper.ts:11",{"_index":161,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/api/user/auth/auth.helper.ts:13",{"_index":142,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/api/user/auth/auth.helper.ts:20",{"_index":144,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/api/user/auth/auth.helper.ts:25",{"_index":158,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/api/user/auth/auth.helper.ts:30",{"_index":150,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/api/user/auth/auth.helper.ts:35",{"_index":153,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/api/user/auth/auth.helper.ts:40",{"_index":147,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/api/user/auth/auth.helper.ts:47",{"_index":156,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/api/user/auth/auth.module.ts",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/api/user/auth/auth.service.ts",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/api/user/auth/auth.service.ts:11",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/user/auth/auth.service.ts:14",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/user/auth/auth.service.ts:16",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/user/auth/auth.service.ts:33",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/user/auth/auth.service.ts:55",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/api/user/auth/auth.strategy.ts",{"_index":264,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/api/user/auth/auth.strategy.ts:11",{"_index":266,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/api/user/auth/auth.strategy.ts:21",{"_index":268,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/api/user/user.controller.ts",{"_index":363,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/api/user/user.controller.ts:25",{"_index":367,"title":{},"body":{"controllers/UserController.html":{}}}],["src/api/user/user.dto.ts",{"_index":340,"title":{},"body":{"classes/UpdateNameDto.html":{},"coverage.html":{}}}],["src/api/user/user.dto.ts:6",{"_index":341,"title":{},"body":{"classes/UpdateNameDto.html":{}}}],["src/api/user/user.entity.ts",{"_index":343,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/api/user/user.entity.ts:10",{"_index":346,"title":{},"body":{"entities/User.html":{}}}],["src/api/user/user.entity.ts:14",{"_index":357,"title":{},"body":{"entities/User.html":{}}}],["src/api/user/user.entity.ts:17",{"_index":355,"title":{},"body":{"entities/User.html":{}}}],["src/api/user/user.entity.ts:20",{"_index":354,"title":{},"body":{"entities/User.html":{}}}],["src/api/user/user.entity.ts:7",{"_index":349,"title":{},"body":{"entities/User.html":{}}}],["src/api/user/user.module.ts",{"_index":381,"title":{},"body":{"modules/UserModule.html":{}}}],["src/api/user/user.service.ts",{"_index":384,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/api/user/user.service.ts:11",{"_index":386,"title":{},"body":{"injectables/UserService.html":{}}}],["src/api/user/user.service.ts:13",{"_index":385,"title":{},"body":{"injectables/UserService.html":{}}}],["src/app.controller.ts",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/helper/env.helper.ts",{"_index":401,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":403,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/typeorm/typeorm.service.ts",{"_index":311,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"coverage.html":{}}}],["src/shared/typeorm/typeorm.service.ts:10",{"_index":313,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["src/shared/typeorm/typeorm.service.ts:8",{"_index":316,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["start",{"_index":458,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":461,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":462,"title":{},"body":{"index.html":{}}}],["started",{"_index":438,"title":{"index.html":{}},"body":{}}],["starter",{"_index":451,"title":{},"body":{"index.html":{}}}],["statements",{"_index":392,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":485,"title":{},"body":{"index.html":{}}}],["stop",{"_index":501,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":272,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":276,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":261,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":476,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":512,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":335,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["t",{"_index":497,"title":{},"body":{"index.html":{}}}],["table",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":465,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":468,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":467,"title":{},"body":{"index.html":{}}}],["tests",{"_index":464,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":474,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["this.config.get('database_host",{"_index":320,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.config.get('database_name",{"_index":324,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.config.get('database_password",{"_index":327,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.config.get('database_port",{"_index":322,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.config.get('database_user",{"_index":326,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.helper.encodepassword(password",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.helper.generatetoken(user",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.helper.ispasswordvalid",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.helper.validateuser(payload",{"_index":281,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.jwt",{"_index":170,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["this.jwt.decode(token",{"_index":172,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["this.jwt.sign",{"_index":177,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["this.jwt.verify(token",{"_index":192,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["this.repository.findone",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.repository.findone(decoded.id",{"_index":175,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["this.repository.save(user",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.repository.update(user.id",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.service.login(body",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.refresh(user",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.register(body",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.service.updatename(body",{"_index":377,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validateuser(decoded",{"_index":197,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["throw",{"_index":187,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{}}}],["timestamp",{"_index":350,"title":{},"body":{"entities/User.html":{}}}],["token",{"_index":145,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["touch",{"_index":486,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":359,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["trim",{"_index":288,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["trim()@isemail",{"_index":284,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["true",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthHelper.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"entities/User.html":{}}}],["twitter",{"_index":492,"title":{},"body":{"index.html":{}}}],["type",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateNameDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":167,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm_migrations",{"_index":333,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["typeormconfigservice",{"_index":56,"title":{"injectables/TypeOrmConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TypeOrmConfigService.html":{},"coverage.html":{}}}],["typeormmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":314,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["typeormoptionsfactory",{"_index":317,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["typescript",{"_index":450,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":164,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["undefined",{"_index":353,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":463,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":191,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/JwtAuthGuard.html":{}}}],["unlicensed",{"_index":522,"title":{},"body":{"properties.html":{}}}],["updatename",{"_index":364,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatename(body",{"_index":365,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatenamedto",{"_index":339,"title":{"classes/UpdateNameDto.html":{}},"body":{"classes/UpdateNameDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["use",{"_index":337,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["useclass",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":105,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user's",{"_index":181,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["user.controller",{"_index":382,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":370,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.email",{"_index":180,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{}}}],["user.entity",{"_index":371,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":178,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["user.name",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.password",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":373,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":19,"title":{},"body":{"modules/ApiModule.html":{}}}],["usercontroller",{"_index":362,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":8,"title":{"modules/UserModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":325,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["userpassword",{"_index":152,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["userservice",{"_index":372,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":137,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":267,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(token",{"_index":155,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["validateuser",{"_index":138,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["validateuser(decoded",{"_index":157,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["validator",{"_index":293,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateNameDto.html":{},"dependencies.html":{}}}],["value",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":345,"title":{},"body":{"entities/User.html":{}}}],["variable",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":523,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":520,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":459,"title":{},"body":{"index.html":{}}}],["website",{"_index":490,"title":{},"body":{"index.html":{}}}],["world",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":479,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":9,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nRoleModule\n\nRoleModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nRoleModule->ApiModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nApiModule -->\n\nUserModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            RoleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserModule } from './user/user.module';\nimport { RoleModule } from './role/role.module';\n\n@Module({\n  imports: [UserModule, RoleModule]\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    getHello(): string {\n        return this.appService.getHello();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { getEnvPath } from './common/helper/env.helper';\nimport { TypeOrmConfigService } from './shared/typeorm/typeorm.service';\nimport { ApiModule } from './api/api.module';\n\nconst envFilePath: string = getEnvPath(`${__dirname}/common/envs`);\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({ envFilePath, isGlobal: true }),\n        TypeOrmModule.forRootAsync({ useClass: TypeOrmConfigService }),\n        ApiModule,\n    ],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n    getHello(): string {\n        return 'Hello World!';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                login\n                            \n                            \n                                    Private\n                                refresh\n                            \n                            \n                                    Private\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/api/user/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(undefined: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/api/user/auth/auth.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n            \n                \n                    Defined in src/api/user/auth/auth.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Inject,\n    Post,\n    ClassSerializerInterceptor,\n    UseInterceptors,\n    UseGuards,\n    Req,\n} from '@nestjs/common';\nimport { User } from '@/api/user/user.entity';\nimport { RegisterDto, LoginDto } from './auth.dto';\nimport { JwtAuthGuard } from './auth.guard';\nimport { AuthService } from './auth.service';\nimport { Request } from 'express';\n\n@Controller('auth')\nexport class AuthController {\n    @Inject(AuthService)\n    private readonly service: AuthService;\n\n    @Post('register')\n    @UseInterceptors(ClassSerializerInterceptor)\n    private register(@Body() body: RegisterDto): Promise {\n        return this.service.register(body);\n    }\n\n    @Post('login')\n    private login(@Body() body: LoginDto): Promise {\n        return this.service.login(body);\n    }\n\n    @Post('refresh')\n    @UseGuards(JwtAuthGuard)\n    private refresh(@Req() { user }: Request): Promise {\n        return this.service.refresh(user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthHelper.html":{"url":"injectables/AuthHelper.html","title":"injectable - AuthHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/auth/auth.helper.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwt\n                            \n                            \n                                    Private\n                                    Readonly\n                                repository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                decode\n                            \n                            \n                                    Public\n                                encodePassword\n                            \n                            \n                                    Public\n                                generateToken\n                            \n                            \n                                    Public\n                                isPasswordValid\n                            \n                            \n                                    Private\n                                    Async\n                                validate\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/api/user/auth/auth.helper.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decode\n                        \n                    \n                \n            \n            \n                \n                    \n                    decode(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.helper.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        encodePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    encodePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.helper.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.helper.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isPasswordValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPasswordValid(password: string, userPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.helper.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.helper.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(decoded: any)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.helper.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    decoded\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtService\n\n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.helper.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        repository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(User)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.helper.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '@/api/user/user.entity';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class AuthHelper {\n  @InjectRepository(User)\n  private readonly repository: Repository;\n\n  private readonly jwt: JwtService;\n\n  constructor(jwt: JwtService) {\n    this.jwt = jwt;\n  }\n\n  // Decoding the JWT Token\n  public async decode(token: string): Promise {\n    return this.jwt.decode(token, null);\n  }\n\n  // Get User by User ID we get from decode()\n  public async validateUser(decoded: any): Promise {\n    return this.repository.findOne(decoded.id);\n  }\n\n  // Generate JWT Token\n  public generateToken(user: User): string {\n    return this.jwt.sign({ id: user.id, email: user.email });\n  } \n\n  // Validate User's password\n  public isPasswordValid(password: string, userPassword: string): boolean {\n    return bcrypt.compareSync(password, userPassword);\n  }\n\n  // Encode User's password\n  public encodePassword(password: string): string {\n    const salt: string = bcrypt.genSaltSync(10);\n\n    return bcrypt.hashSync(password, salt);\n  }\n\n  // Validate JWT Token, throw forbidden error if JWT Token is invalid\n  private async validate(token: string): Promise {\n    const decoded: unknown = this.jwt.verify(token);\n\n    if (!decoded) {\n      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n    }\n\n    const user: User = await this.validateUser(decoded);\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthHelper\n\nAuthHelper\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthHelper->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/user/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthHelper\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '@/api/user/user.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthHelper } from './auth.helper';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './auth.strategy';\nimport { ConfigService } from '@nestjs/config';\n\n@Module({\n    imports: [\n        PassportModule.register({ defaultStrategy: 'jwt', property: 'user' }),\n        JwtModule.registerAsync({\n            inject: [ConfigService],\n            useFactory: (config: ConfigService) => ({\n                secret: config.get('JWT_KEY'),\n                signOptions: { expiresIn: config.get('JWT_EXPIRES') },\n            }),\n        }),\n        TypeOrmModule.forFeature([User]),\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, AuthHelper, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                helper\n                            \n                            \n                                    Private\n                                    Readonly\n                                repository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                refresh\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthHelper\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(AuthHelper)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        repository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(User)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '@/api/user/user.entity';\nimport { Repository } from 'typeorm';\nimport { RegisterDto, LoginDto } from './auth.dto';\nimport { AuthHelper } from './auth.helper';\n\n@Injectable()\nexport class AuthService {\n    @InjectRepository(User)\n    private readonly repository: Repository;\n\n    @Inject(AuthHelper)\n    private readonly helper: AuthHelper;\n\n    public async register(body: RegisterDto): Promise {\n        const { name, email, password }: RegisterDto = body;\n        let user: User = await this.repository.findOne({ where: { email } });\n\n        if (user) {\n            throw new HttpException('Conflict', HttpStatus.CONFLICT);\n        }\n\n        user = new User();\n\n        user.name = name;\n        user.email = email;\n        user.password = this.helper.encodePassword(password);\n\n        return this.repository.save(user);\n    }\n\n    public async login(body: LoginDto): Promise {\n        const { email, password }: LoginDto = body;\n        const user: User = await this.repository.findOne({ where: { email } });\n\n        if (!user) {\n            throw new HttpException('No user found', HttpStatus.NOT_FOUND);\n        }\n\n        const isPasswordValid: boolean = this.helper.isPasswordValid(\n            password,\n            user.password,\n        );\n\n        if (!isPasswordValid) {\n            throw new HttpException('No user found', HttpStatus.NOT_FOUND);\n        }\n\n        this.repository.update(user.id, { lastLoginAt: new Date() });\n\n        return this.helper.generateToken(user);\n    }\n\n    public async refresh(user: User): Promise {\n        this.repository.update(user.id, { lastLoginAt: new Date() });\n\n        return this.helper.generateToken(user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/auth/auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                canActivate\n                            \n                            \n                                    Public\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(err, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ExecutionContext } from '@nestjs/common';\nimport { AuthGuard, IAuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { User } from '@/api/user/user.entity';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') implements IAuthGuard {\n    public handleRequest(err: unknown, user: User): any {\n        return user;\n    }\n\n    public async canActivate(context: ExecutionContext): Promise {\n        await super.canActivate(context);\n\n        const { user }: Request = context.switchToHttp().getRequest();\n\n        return user ? true : false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/auth/auth.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/api/user/auth/auth.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: string)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/auth/auth.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthHelper\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(AuthHelper)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.strategy.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { User } from '@/api/user/user.entity';\nimport { AuthHelper } from './auth.helper';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    @Inject(AuthHelper)\n    private readonly helper: AuthHelper;\n\n    constructor(@Inject(ConfigService) config: ConfigService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: config.get('JWT_KEY'),\n            ignoreExpiration: true,\n        });\n    }\n\n    private validate(payload: string): Promise {\n        return this.helper.validateUser(payload);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Trim()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Trim } from 'class-sanitizer';\nimport { IsEmail, IsOptional, IsString, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n    @Trim()\n    @IsEmail()\n    public readonly email: string;\n\n    @IsString()\n    @MinLength(8)\n    public readonly password: string;\n\n    @IsString()\n    @IsOptional()\n    public readonly name?: string;\n}\n\nexport class LoginDto {\n    @Trim()\n    @IsEmail()\n    public readonly email: string;\n\n    @IsString()\n    public readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/auth/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Trim()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/auth/auth.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Trim } from 'class-sanitizer';\nimport { IsEmail, IsOptional, IsString, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n    @Trim()\n    @IsEmail()\n    public readonly email: string;\n\n    @IsString()\n    @MinLength(8)\n    public readonly password: string;\n\n    @IsString()\n    @IsOptional()\n    public readonly name?: string;\n}\n\nexport class LoginDto {\n    @Trim()\n    @IsEmail()\n    public readonly email: string;\n\n    @IsString()\n    public readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                role\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('role')\nexport class RoleController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoleModule.html":{"url":"modules/RoleModule.html","title":"module - RoleModule","body":"\n                   \n\n\n\n\n    Modules\n    RoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_providers\n\n\n\n\nRoleService\n\nRoleService\n\n\n\nRoleModule\n\nRoleModule\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/role/role.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoleController } from './role.controller';\nimport { RoleService } from './role.service';\n\n@Module({\n  controllers: [RoleController],\n  providers: [RoleService]\n})\nexport class RoleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoleService.html":{"url":"injectables/RoleService.html","title":"injectable - RoleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/role/role.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RoleService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TypeOrmConfigService.html":{"url":"injectables/TypeOrmConfigService.html","title":"injectable - TypeOrmConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TypeOrmConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/typeorm/typeorm.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        createTypeOrmOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTypeOrmOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/typeorm/typeorm.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/typeorm/typeorm.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmOptionsFactory, TypeOrmModuleOptions } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TypeOrmConfigService implements TypeOrmOptionsFactory {\n    @Inject(ConfigService)\n    private readonly config: ConfigService;\n\n    public createTypeOrmOptions(): TypeOrmModuleOptions {\n        return {\n            type: 'postgres',\n            host: this.config.get('DATABASE_HOST'),\n            port: this.config.get('DATABASE_PORT'),\n            database: this.config.get('DATABASE_NAME'),\n            username: this.config.get('DATABASE_USER'),\n            password: this.config.get('DATABASE_PASSWORD'),\n            entities: ['dist/**/*.entity.{ts,js}'],\n            migrations: ['dist/migrations/*.{ts,js}'],\n            migrationsTableName: 'typeorm_migrations',\n            logger: 'file',\n            synchronize: true, // never use TRUE in production!\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNameDto.html":{"url":"classes/UpdateNameDto.html","title":"class - UpdateNameDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNameDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/user.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class UpdateNameDto {\n    @IsString()\n    @IsOptional()\n    public readonly name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                lastLoginAt\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lastLoginAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { BaseEntity, Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    public id!: number;\n\n    @Column({ type: 'varchar' })\n    public email!: string;\n\n    @Exclude()\n    @Column({ type: 'varchar' })\n    public password!: string;\n\n    @Column({ type: 'varchar', nullable: true })\n    public name: string | null;\n\n    @Column({ type: 'timestamp', nullable: true, default: null })\n    public lastLoginAt: Date | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                updateName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateName(body: UpdateNameDto, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('name')@UseGuards(JwtAuthGuard)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n            \n                \n                    Defined in src/api/user/user.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UpdateNameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    ClassSerializerInterceptor,\n    Controller,\n    Req,\n    UseGuards,\n    UseInterceptors,\n    Put,\n    Body,\n    Inject,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { JwtAuthGuard } from '@/api/user/auth/auth.guard';\nimport { UpdateNameDto } from './user.dto';\nimport { User } from './user.entity';\nimport { UserService } from './user.service';\n\n@Controller('user')\nexport class UserController {\n    @Inject(UserService)\n    private readonly service: UserService;\n\n    @Put('name')\n    @UseGuards(JwtAuthGuard)\n    @UseInterceptors(ClassSerializerInterceptor)\n    private updateName(\n        @Body() body: UpdateNameDto,\n        @Req() req: Request,\n    ): Promise {\n        return this.service.updateName(body, req);\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserController } from './user.controller';\nimport { User } from './user.entity';\nimport { UserService } from './user.service';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n    imports: [TypeOrmModule.forFeature([User]), AuthModule],\n    controllers: [UserController],\n    providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                repository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateName\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateName(body: UpdateNameDto, req: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/api/user/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UpdateNameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        repository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(User)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/api/user/user.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { UpdateNameDto } from './user.dto';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UserService {\n    @InjectRepository(User)\n    private readonly repository: Repository;\n\n    public async updateName(body: UpdateNameDto, req: Request): Promise {\n        const user: User = req.user;\n\n        user.name = body.name;\n\n        return this.repository.save(user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/api/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/api/role/role.service.ts\n            \n            injectable\n            RoleService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/api/user/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/user/auth/auth.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/user/auth/auth.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/user/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/api/user/auth/auth.helper.ts\n            \n            injectable\n            AuthHelper\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/api/user/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/api/user/auth/auth.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/api/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/user/user.dto.ts\n            \n            class\n            UpdateNameDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/api/user/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/api/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            envFilePath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/helper/env.helper.ts\n            \n            function\n            getEnvPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/typeorm/typeorm.service.ts\n            \n            injectable\n            TypeOrmConfigService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            class-sanitizer : ^1.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.2\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.10\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getEnvPath   (src/.../env.helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/helper/env.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getEnvPath\n                        \n                    \n                \n            \n            \n                \ngetEnvPath(dest: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dest\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nDocker\ndocker build -t relevic-backend .\ndocker run -p80:3000 relevic-backend\ndocker stop *ps*New Module\nnest g mo api/role && nest g co api/role --no-spec && nest g s api/role --no-spec\ntouch src/api/role/role.dto.ts\ntouch src/api/role/role.entity.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nRoleModule\n\nRoleModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nRoleModule->ApiModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nApiModule -->\n\nUserModule->ApiModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthHelper\n\nAuthHelper\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthHelper->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            envFilePath   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envFilePath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : getEnvPath(`${__dirname}/common/envs`)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
